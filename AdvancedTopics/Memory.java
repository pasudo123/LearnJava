package JavaAdvanced;

public class Memory {
	public static void main(String[]args){	// Line 1 : 메인 메소드, 메인 스레드가 사용될 스택 메모리를 생성한다.
		
		int i = 1;							// Line 2 : 메인 메소드의 스택 메모리에 해당 변수가 생성된다.
		Object obj = new Object();			// Line 3 : Object 클래스는 힙 메모리에 생성되고, 해당 레퍼런스는 스택 메모리에 저장된다.
		Memory mem = new Memory();			// Line 4 : Line3 과 동일하게 오브젝트는 힙에 저장되고 해당 레퍼런스는 스택 메모리에 쌓인다.
		mem.foo(obj);						// Line 5 : foo() 메소드를 호출하면서 foo () 메소드가 스택 메모리에 생성되고 
											//		오브젝트에 대한 참조 reference foo() 스택 메모리 내 변수로 생성된다.
	}										
	// main() 끝나는 부분 : 메인 메소드에 대한 스택 메모리가 소멸되고, 프로그램이 끝나기 때문에
	// Java Runtime 은 모든 메모리를 해제하고 프로그램 실행을 종료한다.
	
	
	private void foo(Object param){			// Line 6
		String str = param.toString();		// Line 7
		System.out.println(str);			// Line 8
	}										// Line 9 : foo() 메소드가 종료되고 foo() 에 할당된 메모리 블록은 해제된다.
}

/************************************************************************
 * 
 * [ Java Heap Space ]
 * 자바 런타임에서 Object 및 JRE 클래스에 메모리를 할당하는데 사용
 * 객체를 만들 때 마다 항상 힙 공간에서 만들어진다.
 * 
 * Garbage Collecion 은 힙메모리에서 실행되어 참조가 없는 
 * 오브젝트가 사용하는 메모리를 비운다. 힙 공간에서 생성된 모든 객체는
 * 전역 액세스 권한을 가지며 프로그램 어느 곳에서나 참조할 수 있다.
 *
 *
 * [ Java Stack Memory ]
 * 스택 메모리는 스레드 실행에서 사용된다.
 * 이 메소드는 일시적인 메소드 특정 값과
 * 메소드에서 참조되는 힙의 다른 오브젝트에 대한 참조가 들어있다.
 * LIFO 구조를 가지며 메소드가 호출될 때마다 메소드의 로컬 변수 값을 보유하고
 * 다른 오브젝트를 참조하는 새 블록이 스택 메모리에 쌓인다.
 * 스택 메모리의 크기는 힙 메모리의 크기에 비해 매우 적다.(메모리 할당이 단순하기 때문에) 그리고 다른 스레드가 액세스 할 수 없다.
 * 
 * 
 * [ Difference Stack Memory & Heap Memory]
 * (1) 스택 메모리는 하나의 실행 스레드에 의해서만 사용되고, 스레드 종료시 스택 메모리가 소멸된다.
 * (2) 힙 메모리는 응용 프로그램의 모든 부분에서 사용된다.
 * (3) 객체가 생성될 때마다 항상 힙 메모리에 저장되고 스택 메모리에서는 힙 공간에 있는 객체에 대한 참조를 포함하고 있다.
 * (4) 힙 메모리는 전역적 액세스가 권한이 있지만 스택 메모리는 다른 스레드가 액세스할 수 없다.
 * (5) 스택 메모리가 LIFO 구조를 지닌 것에 비해서, 힙 메모리는 Young Generation 영역 그리고 Old Generation 영역으로 나뉘어져 있다. (GC 내용 공부)
 * (6) 스택 메모리 일시적인 것에 반해 힙 메모리는 프로그램이 시작해서 끝날때까지 살아있다.
 * (7) 스택 메모리가 full 이면 java.lang.StackOverFlowError 를 호출한다.
 * (8) 힙 메모리가 full 이면 java.lang.OutOfMemoryError:Java Heap Space 를 호출한다.
 *
 ************************************************************************/