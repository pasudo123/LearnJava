1) Annotation -----
몇가지 한정되지만, 커스텀 어노테이션을 만들 수도 있다. 
어노테이션의 본질적인 목적은 소스코드에 메타데이터를 표현하는 것이다. 
단순히 부가적인 표현뿐만 아니라 리플렉션을 이용하면 어노테이션 지정만으로도 원하는 클래스를 주입하는 것이 가능하다.

여기서 메타데이터란 데이터에 관한 데이터를 의미한다. 
어느 목적을 가지고 만들어지는 데이터를 의미하는데, 
다른 데이터를 설명해주는 데이터라고 생각하면 된다. 
대량의 정보들 속에서도 정보를 효율적으로 찾기 위해 일정한 규칙과 콘텐츠에 대해 부여되는 데이터이다.

일반적으로 Meta는 ~에 관한(about)이라는 의미로 사용된다. 

2) Built-in Annotation -----
- @Override : 메소드가 오버라이드 되었는지 검증한다.
- @Deprecated : 메소드를 사용하지 말도록 유도한다. 만약 사용한다면 컴파일 경고를 일으킨다.
- @SuppressWarnings : 컴파일 경고를 무시하도록 하낟.
- @SafeVarargs : 제네릭 같은 가변인자 매개변수를 사용할 때 경고를 무시한다.(Java7 이상)
- FunctionalInterface : 람다 함수등을 위한 인터페이스를 지정한다. 메소드가 없거나 두 개 이상되면 컴파일 오류가 난다.(Java8 이상)

3) Meta Annotations -----
메타 어노테이션도 존재한다. 이 메타 어노테이션을 통해서 커스텀 어노테이션의 생성이 가능하다.

- @Retention : 어노테이션의 범위라고 할 수 있다. 어떤 시점까지 어노테이션이 영향을 미치는지 결정
- @Documented : 문서에도 어노테이션의 정보가 표현된다.
- @Target : 어노테이션이 적용할 위치를 결정
- @Inherited : 이 어노테이션을 선언하면 부모클래스에서 어노테이션을 상속 받을 수 있다.
- @Repeatable : 반복적으로 어노테이션을 선언할 수 있게 한다.

4) Declare Custom Annotation -----